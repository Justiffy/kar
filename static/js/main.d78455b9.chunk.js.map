{"version":3,"sources":["api/useApi.ts","api/hkApi.ts","api/ApiClient.ts","api/utils/createAxiosInstance.ts","pages/WebM/index.tsx","components/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ApiContext","createContext","HkApi","getAllThreads","createRequest","url","method","getAllPostsByThread","thread","config","axiosInstance","this","axios","create","baseURL","createAxiosInstance","requestConfig","requestData","request","params","then","response","data","Board","api","useContext","useState","playList","setPlayList","currentIndex","setCurrentIndex","useEffect","console","log","a","thredIndex","threadList","threadsID","threads","map","el","num","length","dataQ","Array","isArray","forEach","post","files","file","duration","Promise","resolve","setTimeout","fetch","nextFile","shift","className","autoPlay","controls","height","src","path","name","nsfw","type","value","onClick","Root","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iPAIaA,EAAaC,wBAA4B,M,wDCAzCC,EAAb,4MACEC,cAAgB,EAAKC,cACnB,CAAEC,IAAK,kBAAmBC,OAAQ,QAFtC,EAKEC,oBAAsB,SAACC,GAAD,OAAoB,EAAKJ,cAC7C,CAAEC,IAAI,sDAAD,OAAwDG,EAAxD,WAAyEF,OAAQ,OAD9C,IAL5C,YCIA,WAGE,WAAYG,GAA0B,yBAF5BC,mBAE2B,EACnCC,KAAKD,cCR0B,SAACD,GAClC,OAAOG,IAAMC,OAAO,CAClBC,QAAS,gCAAkCL,EAAOJ,MDM7BU,CAAoBN,GAJ7C,0DAQIO,GACC,IAAD,OACA,OAAO,SAACC,GAGN,OAFuB,EAAKP,cAAcQ,QAAnB,2BAAgCF,GAAhC,IAA+CG,OAAQF,KAExDG,MACpB,SAACC,GACC,OAAOA,EAASC,aAf1B,M,gDEDaC,G,MAAkB,WAC7B,IAAMC,EJDMC,qBAAWzB,GIAY,EAEH0B,mBAAiB,IAFd,mBAE5BC,EAF4B,KAElBC,EAFkB,OAGKF,mBAAiB,GAHtB,mBAG5BG,EAH4B,KAGdC,EAHc,KAKnCC,qBAAU,WACRC,QAAQC,IAAI,eACD,uCAAG,kCAAAC,EAAA,6DACRC,EAAa,EADL,gBAEaX,QAFb,IAEaA,OAFb,EAEaA,EAAKrB,gBAFlB,UAENiC,EAFM,OAGNC,EAHM,OAGMD,QAHN,IAGMA,OAHN,EAGMA,EAAYE,QAAQC,KAAI,SAAAC,GAAE,OAAIA,EAAGC,OAHvC,sDAMLJ,EAAUK,OAASP,GANd,yCAOUX,QAPV,IAOUA,OAPV,EAOUA,EAAKjB,oBAAoB8B,EAAUF,IAP7C,WAOJQ,EAPI,OAQVR,GAAc,EACTS,MAAMC,QAAQF,GATT,8DAUL,OAALA,QAAK,IAALA,KAAOG,SAAQ,SAAAC,GACRA,EAAKC,MAAMN,QAEhBK,EAAKC,MAAMF,SAAQ,SAAAG,GACbA,EAAKC,UACPtB,GAAY,SAACoB,GAAD,4BAAoBA,GAApB,CAA2BC,aAfnC,UAmBJ,IAAIE,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAnBzC,mEAAH,oDAsBXE,KACC,CAAC9B,IAEJ,IAAM+B,EAAW,SAACC,GACZ3B,EAAe2B,EAAQ,GAC3B1B,EAAgBD,EAAe2B,IAGjC,OACE,+BACK7B,EAASe,QACV,yBAAKe,UAAU,aACb,2BACEC,UAAQ,EACRC,UAAQ,EACRC,OAAO,MACPC,IAAK,iBAAmBlC,EAASE,GAAciC,OAEjD,8BAAOnC,EAASE,GAAckC,MAC9B,8BAAOpC,EAASE,GAAcmC,MAC9B,6BACE,2BAAOC,KAAK,SAASC,MAAM,KAAKC,QAAS,kBAAMZ,GAAU,MACzD,2BAAOU,KAAK,SAASC,MAAM,KAAKC,QAAS,kBAAMZ,EAAS,WCrDvDa,EAAiB,WAC5B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAON,KAAK,MACV,kBAAC,EAAD,SCFFtC,EAAM,IAAItB,EAAM,CAAEG,IAAK,mBAYdgE,EAVO,WACpB,OACE,kBAACrE,EAAWsE,SAAZ,CAAqBJ,MAAO1C,GAC1B,kBAAC,IAAD,KACE,kBAAC,EAAD,SCDY+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/D,MAAK,SAAAgE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.d78455b9.chunk.js","sourcesContent":["import { createContext, useContext } from 'react'\r\n\r\nimport { HkApi } from './hkApi';\r\n\r\nexport const ApiContext = createContext<HkApi | null>(null);\r\n\r\nexport const useApi = () => {\r\n  const api = useContext(ApiContext);\r\n\r\n  return api;\r\n}","import { ApiClient } from \"./ApiClient\";\r\n\r\nimport { getAllThreads, post } from './types/endpoints'\r\n\r\nexport class HkApi extends ApiClient {\r\n  getAllThreads = this.createRequest<void, getAllThreads>(\r\n    { url: \"/b/threads.json\", method: \"get\" },\r\n  )\r\n\r\n  getAllPostsByThread = (thread: string) => this.createRequest<void, post[]>(\r\n    { url: `/makaba/mobile.fcgi?task=get_thread&board=b&thread=${thread}&post=0`, method: \"get\"}\r\n  )();\r\n}","import { AxiosInstance, AxiosRequestConfig } from \"axios\";\r\n\r\nimport { createAxiosInstance } from \"./utils/createAxiosInstance\";\r\n\r\nexport interface ApiClientConfig {\r\n  url: string;\r\n}\r\n\r\nexport class ApiClient {\r\n  protected axiosInstance: AxiosInstance;\r\n\r\n  constructor(config: ApiClientConfig) {\r\n    this.axiosInstance = createAxiosInstance(config);\r\n  }\r\n\r\n  protected createRequest<ReqT, RespT>(\r\n    requestConfig: Required<Pick<AxiosRequestConfig, \"method\" | \"url\">>,\r\n  ) {\r\n    return (requestData: ReqT) => {\r\n      const requestPromise = this.axiosInstance.request({ ...requestConfig, params: requestData });\r\n\r\n      return requestPromise.then(\r\n        (response): RespT => {\r\n          return response.data;\r\n        },\r\n      );\r\n    };\r\n  }\r\n}","import axios from \"axios\";\r\n\r\nimport { ApiClientConfig } from \"../ApiClient\";\r\n\r\nexport const createAxiosInstance = (config: ApiClientConfig) => {\r\n  return axios.create({\r\n    baseURL: 'https://proxy.x7.workers.dev/' + config.url,\r\n  });\r\n};\r\n","import React, { useEffect,  useState } from 'react';\r\n\r\nimport { useApi } from 'api/useApi';\r\nimport { file } from 'api/types/endpoints'\r\n\r\nimport './style.css'\r\n\r\nexport const Board: React.FC = () => {\r\n  const api = useApi();\r\n  const [playList, setPlayList] = useState<file[]>([]);\r\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\r\n  \r\n  useEffect(() => {\r\n    console.log('test!!!!!!!')\r\n    const fetch = async () => {\r\n      let thredIndex = 0;\r\n      const threadList = await api?.getAllThreads();\r\n      const threadsID = threadList?.threads.map(el => el.num);\r\n      if (!threadsID) return;\r\n      \r\n      while (threadsID.length > thredIndex) {\r\n        const dataQ = await api?.getAllPostsByThread(threadsID[thredIndex]);\r\n        thredIndex += 1;\r\n        if (!Array.isArray(dataQ)) continue;\r\n        dataQ?.forEach(post => {\r\n          if (!post.files.length) return;\r\n\r\n          post.files.forEach(file => {\r\n            if (file.duration) {\r\n              setPlayList((files: any) => [...files, file]);\r\n            }\r\n          })\r\n        })\r\n        await new Promise((resolve) => setTimeout(resolve, 500));\r\n      }\r\n    }\r\n    fetch();\r\n  }, [api])\r\n\r\n  const nextFile = (shift: number) => {\r\n    if (currentIndex + shift < 0) return\r\n    setCurrentIndex(currentIndex + shift)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!!playList.length && (\r\n        <div className=\"container\">\r\n          <video\r\n            autoPlay\r\n            controls\r\n            height=\"500\"\r\n            src={'https://2ch.hk' + playList[currentIndex].path}\r\n          />\r\n          <span>{playList[currentIndex].name}</span>\r\n          <span>{playList[currentIndex].nsfw}</span>\r\n          <div>\r\n            <input type=\"button\" value=\"<-\" onClick={() => nextFile(-1)} />\r\n            <input type=\"button\" value=\"->\" onClick={() => nextFile(1)} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n} ","import React from 'react';\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Board } from '../pages/WebM'\r\n\r\nexport const Root: React.FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/b\">\r\n        <Board />\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}","import React from 'react';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport { ApiContext } from './api/useApi';\r\nimport { HkApi } from \"./api/hkApi\";\r\nimport {Root} from './components/Root';\r\n\r\nconst api = new HkApi({ url: \"https://2ch.hk\" });\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ApiContext.Provider value={api}>\r\n      <BrowserRouter>\r\n        <Root />\r\n      </BrowserRouter>\r\n    </ApiContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}